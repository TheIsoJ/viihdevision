generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Video {
    id          String   @id @default(uuid())
    name        String
    description String?  @db.LongText
    videoId     String
    views       Int      @default(0)
    publishDate DateTime @default(now())
    updatedAt   DateTime @updatedAt
    likes       Like[]

    categoryId String?
    userId     String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([publishDate, id])
    @@index([categoryId])
    @@index([userId])
}

model Like {
    userId  String
    videoId String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@id([userId, videoId])
    @@index([userId])
    @@index([videoId])
}

model PromoItem {
    id          String @id @default(uuid())
    name        String
    description String
    link        String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // Non-Next Auth
    likes  Like[]
    videos Video[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
